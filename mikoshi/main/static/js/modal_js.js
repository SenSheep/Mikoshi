// --- –ú–æ–¥–∞–ª–∫–∞ —É—Ä–æ–Ω–∞ / HP ---
document.getElementById("openModalBtn").addEventListener("click", () => {
  document.getElementById("modalOverlayDamage").style.display = "flex";
});

document.getElementById("closeModalBtn").addEventListener("click", () => {
  document.getElementById("modalOverlayDamage").style.display = "none";
});

document.getElementById("modalOverlayDamage").addEventListener("click", function (e) {
  if (e.target === this) this.style.display = "none";
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ + —ç—Ñ—Ñ–µ–∫—Ç—ã —É—Ä–æ–Ω–∞
function getDamage() {
  const realHpField = document.querySelector('.real_hp');
  const armor_bodyField = document.querySelector('input.armor[data-armor="body"]');
  const damageField = document.querySelector('.damage');

  const piercing = document.querySelector('input.damageEffect[data-type="piercing"]'); //–ë—Ä–æ–Ω–µ–±–æ–π–Ω—ã–µ
  const through = document.querySelector('input.damageEffect[data-type="through"]'); //–°–∫–≤–æ–∑—å –±—Ä–æ–Ω—é
  const piercingless = document.querySelector('input.damageEffect[data-type="piercingless"]'); //–ò–≥–Ω–æ—Ä 1\2 –±—Ä–æ–Ω–∏
  const realHp = parseInt(realHpField.value, 10);
  const armor_body = parseInt(armor_bodyField.value, 10);
  const damage = parseInt(damageField.value, 10);

  //–ò–≥–Ω–æ—Ä 1\2 –±—Ä–æ–Ω–∏
  if (piercingless.checked) {
    if (damage - Math.ceil(armor_body / 2) < 0) {
      return alert("–ù–µ –ø—Ä–æ–±–∏–ª");
    }
    const real_damage = realHp - (damage - Math.ceil(armor_body / 2));
    realHpField.value = real_damage;
    if (piercing.checked) { //–ë—Ä–æ–Ω–µ–±–æ–π–Ω—ã–µ
      armor_bodyField.value = armor_body - 2;
    }
    else {
      armor_bodyField.value = armor_body - 1;
    }
    return;
  }

  //–°–∫–≤–æ–∑—å –±—Ä–æ–Ω—é
  if (through.checked) {
    const real_damage = realHp - damage;
    realHpField.value = real_damage;
    if (piercing.checked) { //–ë—Ä–æ–Ω–µ–±–æ–π–Ω—ã–µ
      armor_bodyField.value = armor_body - 2;
    }
    else {
      armor_bodyField.value = armor_body - 1;
    }
    return;
  }

  // –û–±—ã—á–Ω—ã–µ
  if (damage - armor_body < 0) {
    return alert("–ù–µ –ø—Ä–æ–±–∏–ª");
  }
  const real_damage = realHp - (damage - armor_body);
  realHpField.value = real_damage;
  if (piercing.checked) { //–ë—Ä–æ–Ω–µ–±–æ–π–Ω—ã–µ
    armor_bodyField.value = armor_body - 2;
  }
  else {
    armor_bodyField.value = armor_body - 1;
  }
  return;
}

// --- –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è –∫–∏–±–µ—Ä–∏–º–ø–ª–∞–Ω—Ç–æ–≤ ---
// –î–∞–Ω–Ω—ã–µ –ø–æ –∏–º–ø–ª–∞–Ω—Ç–∞–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ cyber.js
const cyberModCatalog = {
    eye: [
      {
        name: "Thermal Vision",
        cost: 500,
        hl: 2,
        slot: "Cybereye",
        desc: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–µ–ø–ª–æ–≤—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –≤ –ø–æ–ª–Ω–æ–π —Ç–µ–º–Ω–æ—Ç–µ."
      },
      {
        name: "Targeting Scope",
        cost: 750,
        hl: 3,
        slot: "Cybereye",
        desc: "–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏–µ–π —Ü–µ–ª–∏."
      }
    ],
    audio: [
      {
        name: "Amplified Hearing",
        cost: 300,
        hl: 1,
        slot: "Cyberaudio",
        desc: "–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª—É—Ö–∞, —Å–ª—ã—à–∏—Ç —à—ë–ø–æ—Ç —Å–∫–≤–æ–∑—å —Å—Ç–µ–Ω—ã."
      },
      {
        name: "Radio Receiver",
        cost: 450,
        hl: 2,
        slot: "Cyberaudio",
        desc: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞–¥–∏–æ–ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –º–æ–∑–≥."
      }
    ]
  };


let currentCyberTarget = null;

document.querySelectorAll('.add-mod').forEach(button => {
  button.addEventListener('click', () => {
    const target = button.dataset.target;
    currentCyberTarget = target;
    showModOptions(target);
    document.getElementById('modalOverlayCyber').style.display = 'flex';
  });
});

// –ó–ê–ì–†–£–ñ–ê–ï–ú –ú–û–î–´
function showModOptions(target) {
  const modList = cyberModCatalog[target] || [];
  const container = document.getElementById('modOptionsContainer');
  container.innerHTML = "";

  modList.forEach(mod => {
    const div = document.createElement('div');
    div.className = "mod-option";
    div.innerHTML = `
      <strong>${mod.name}</strong><br>
      üí∞ ${mod.cost} eb | üß† HL: ${mod.hl} | üìç ${mod.slot}<br>
      <em>${mod.desc}</em>
    `;
    div.addEventListener('click', () => {
      addModification(target, mod.name);
      closeModModal();
    });
    container.appendChild(div);
  });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function addModification(targetId, modName) {
  const modList = document.querySelector(`.mod-list[data-for="${targetId}"]`);
  if (!modList) return;

  const modDiv = document.createElement('div');
  modDiv.classList.add('mod');
  modDiv.innerHTML = `
    <span>${modName}</span>
    <button class="remove-mod">‚úñ</button>
  `;
  modDiv.querySelector('.remove-mod').addEventListener('click', () => {
    modDiv.remove();
  });
  modList.appendChild(modDiv);
}

document.getElementById("closeModModal").addEventListener("click", () => {
  document.getElementById("modalOverlayCyber").style.display = "none";
});

document.getElementById("modalOverlayCyber").addEventListener("click", function (e) {
  if (e.target === this) this.style.display = "none";
});